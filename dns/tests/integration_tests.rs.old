use either::*;

use dns::either_or::EitherOr;
use pcap_parser::traits::PcapReaderIterator;
use pcap_parser::*;

use std::convert::From;
use std::net::Ipv4Addr;
use std::{fs::File, io::Cursor};

use type2network::FromNetworkOrder;
use type2network_derive::FromNetwork;

use dns::{
    error::DNSResult,
    rfc::{
        a::A, opcode::OpCode, packet_type::PacketType, qclass::QClass, qtype::QType, query::Query,
        rdata::RData, response::Response, response_code::ResponseCode,
    },
};

// helper struct to manage tests
struct PCapData<'a> {
    buf_query: Cursor<&'a [u8]>,
    buf_resp: Cursor<&'a [u8]>,
}

// to ease the data for tests, some captures are made using tcpdump and dig
// and data is saved as a pcap file.
// by convention, we just capture the query form dig and the response from the resolver.
fn read_pcap_sample(pcap_file: &str) -> DNSResult<(Vec<u8>, Vec<u8>)> {
    let mut caps = (Vec::new(), Vec::new());

    let file = File::open(pcap_file)?;
    let mut num_blocks = 0u8;
    let mut reader = LegacyPcapReader::new(65536, file).expect("LegacyPcapReader");

    loop {
        match reader.next() {
            Ok((offset, block)) => {
                match block {
                    // don't need the PCAP header
                    PcapBlockOwned::LegacyHeader(_hdr) => {}

                    // first block is the DNS query, second block is the DNS response
                    PcapBlockOwned::Legacy(b) => {
                        num_blocks += 1;

                        if num_blocks == 1 {
                            caps.0 = b.data[42..].to_vec();
                        } else if num_blocks == 2 {
                            caps.1 = b.data[42..].to_vec();
                        }
                    }
                    PcapBlockOwned::NG(_) => unreachable!(),
                }
                reader.consume(offset);
            }
            Err(PcapError::Eof) => break,
            Err(PcapError::Incomplete) => {
                reader.refill().unwrap();
            }
            Err(e) => panic!("error while reading: {:?}", e),
        }
    }

    Ok(caps)
}

// helper function to write test
fn get_pcap_buffer(v: &(Vec<u8>, Vec<u8>)) -> PCapData {
    PCapData {
        buf_query: Cursor::new(v.0.as_slice()),
        buf_resp: Cursor::new(v.1.as_slice()),
    }
}

#[test]
fn cap1() -> DNSResult<()> {
    let pcap = read_pcap_sample("./tests/cap1.pcap")?;
    let mut buffer = get_pcap_buffer(&pcap);

    // check query
    let mut query = Query::default();
    query.header.deserialize_from(&mut buffer.buf_query)?;

    assert_eq!(query.header.flags.qr, PacketType::Query);
    assert_eq!(query.header.flags.op_code, OpCode::Query);
    assert!(!query.header.flags.authorative_answer);
    assert!(!query.header.flags.truncated);
    assert!(query.header.flags.recursion_desired);
    assert!(!query.header.flags.recursion_available);
    assert!(!query.header.flags.z);
    assert!(query.header.flags.authentic_data);
    assert_eq!(query.header.flags.response_code, ResponseCode::NoError);

    assert_eq!(query.header.qd_count, 1);
    assert_eq!(query.header.an_count, 0);
    assert_eq!(query.header.ns_count, 0);
    assert_eq!(query.header.ar_count, 0);

    query.question.deserialize_from(&mut buffer.buf_query)?;
    assert_eq!(format!("{}", query.question.qname), "www.google.com.");
    assert_eq!(query.question.qtype, QType::A);
    assert_eq!(query.question.qclass, QClass::IN);

    // check response
    let mut resp = Response::default();
    resp.deserialize_from(&mut buffer.buf_resp)?;

    assert_eq!(resp.header.flags.qr, PacketType::Response);
    assert_eq!(resp.header.flags.op_code, OpCode::Query);
    assert!(!resp.header.flags.authorative_answer);
    assert!(!resp.header.flags.truncated);
    assert!(resp.header.flags.recursion_desired);
    assert!(resp.header.flags.recursion_available);
    assert!(!resp.header.flags.z);
    assert!(!resp.header.flags.authentic_data);
    assert_eq!(resp.header.flags.response_code, ResponseCode::NoError);

    assert_eq!(resp.header.qd_count, 1);
    assert_eq!(resp.header.an_count, 1);
    assert_eq!(resp.header.ns_count, 0);
    assert_eq!(resp.header.ar_count, 0);

    assert_eq!(format!("{}", resp.question.qname), "www.google.com.");
    assert_eq!(resp.question.qtype, QType::A);
    assert_eq!(resp.question.qclass, QClass::IN);

    assert!(resp.answer.is_some());
    let answer = resp.answer.unwrap();
    assert_eq!(answer.len(), 1);

    let answer = &answer[0];
    assert_eq!(format!("{}", answer.name), "www.google.com.");
    assert_eq!(answer.r#type, QType::A);
    assert_eq!(answer.class.as_ref(), Left(&QClass::IN));
    assert_eq!(answer.ttl.as_ref(), Left(&119));
    assert_eq!(answer.rd_length, 4);

    assert!(
        matches!(answer.r_data, RData::A(A(addr)) if Ipv4Addr::from(addr) == Ipv4Addr::new(172,217,18,36))
    );

    Ok(())
}

#[test]
fn cap2() -> DNSResult<()> {
    let pcap = read_pcap_sample("./tests/cap2.pcap")?;
    let mut buffer = get_pcap_buffer(&pcap);

    // check query
    let mut query = Query::default();
    query.header.deserialize_from(&mut buffer.buf_query)?;

    assert_eq!(query.header.flags.qr, PacketType::Query);
    assert_eq!(query.header.flags.op_code, OpCode::Query);
    assert!(!query.header.flags.authorative_answer);
    assert!(!query.header.flags.truncated);
    assert!(query.header.flags.recursion_desired);
    assert!(!query.header.flags.recursion_available);
    assert!(!query.header.flags.z);
    assert!(query.header.flags.authentic_data);
    assert_eq!(query.header.flags.response_code, ResponseCode::NoError);

    assert_eq!(query.header.qd_count, 1);
    assert_eq!(query.header.an_count, 0);
    assert_eq!(query.header.ns_count, 0);
    assert_eq!(query.header.ar_count, 1);

    query.question.deserialize_from(&mut buffer.buf_query)?;
    assert_eq!(format!("{}", query.question.qname), "hk.");
    assert_eq!(query.question.qtype, QType::NS);
    assert_eq!(query.question.qclass, QClass::IN);

    // query.additional.deserialize_from(&mut buffer.buf_query)?;
    // assert!(query.additional.is_some());
    // let add = query.additional.unwrap();
    // assert_eq!(add.len(), 1);
    // let add = &add[0];

    // assert_eq!(format!("{}", add.name), ".");
    // assert_eq!(add.r#type, QType::OPT);
    // assert!(matches!(add.class, Class::Payload(pl) if pl == 1232));
    // assert_eq!(add.ttl, 0);
    // assert_eq!(add.rd_length, 12);

    // if let RData::Opt(opt) = add.r_data.as_ref().unwrap() {
    //     assert_eq!(opt.option_code, OptionCode::COOKIE);
    //     assert_eq!(opt.option_length, 8);
    //     assert!(
    //         matches!(&opt.option_data, OptionData::Cookie(cookie) if cookie.client_cookie == [0x9a, 0xe7, 0x01, 0xa1, 0x3b, 0x61, 0x57, 0x2e])
    //     );
    // }

    // check response
    let mut resp = Response::default();
    resp.deserialize_from(&mut buffer.buf_resp)?;

    assert_eq!(resp.header.flags.qr, PacketType::Response);
    assert_eq!(resp.header.flags.op_code, OpCode::Query);
    assert!(!resp.header.flags.authorative_answer);
    assert!(!resp.header.flags.truncated);
    assert!(resp.header.flags.recursion_desired);
    assert!(resp.header.flags.recursion_available);
    assert!(!resp.header.flags.z);
    assert!(resp.header.flags.authentic_data);
    assert_eq!(resp.header.flags.response_code, ResponseCode::NoError);

    assert_eq!(resp.header.qd_count, 1);
    assert_eq!(resp.header.an_count, 8);
    assert_eq!(resp.header.ns_count, 0);
    assert_eq!(resp.header.ar_count, 1);

    // check answers
    assert!(resp.answer.is_some());
    let answer = resp.answer.unwrap();
    assert_eq!(answer.len(), 8);

    for ans in &answer {
        assert_eq!(format!("{}", ans.name), "hk.");
        assert_eq!(ans.r#type, QType::NS);
        assert_eq!(ans.class.unwrap_left(), QClass::IN);
        assert_eq!(ans.ttl.as_ref(), Left(&172800));
    }

    assert_eq!(answer[0].rd_length, 14);
    for i in 1..8 {
        assert_eq!(answer[i].rd_length, 4);
    }

    assert!(matches!(&answer[0].r_data, RData::NS(ns) if ns.to_string() == "c.hkirc.net.hk."));
    assert!(matches!(&answer[1].r_data, RData::NS(ns) if ns.to_string() == "d.hkirc.net.hk."));
    assert!(matches!(&answer[2].r_data, RData::NS(ns) if ns.to_string() == "t.hkirc.net.hk."));
    assert!(matches!(&answer[3].r_data, RData::NS(ns) if ns.to_string() == "u.hkirc.net.hk."));
    assert!(matches!(&answer[4].r_data, RData::NS(ns) if ns.to_string() == "v.hkirc.net.hk."));
    assert!(matches!(&answer[5].r_data, RData::NS(ns) if ns.to_string() == "x.hkirc.net.hk."));
    assert!(matches!(&answer[6].r_data, RData::NS(ns) if ns.to_string() == "y.hkirc.net.hk."));
    assert!(matches!(&answer[7].r_data, RData::NS(ns) if ns.to_string() == "z.hkirc.net.hk."));

    // check additional records
    assert!(resp.additional.is_some());
    let add = resp.additional.unwrap();
    assert_eq!(add.len(), 1);
    let add = &add[0];

    assert_eq!(format!("{}", add.name), ".");
    assert_eq!(add.r#type, QType::OPT);
    assert_eq!(add.class.unwrap_right(), 1232);
    //assert_eq!(add.ttl.unwrap_left(), 0);
    assert_eq!(add.rd_length, 0);

    Ok(())
}

// #[test]
// fn cap3() -> DNSResult<()> {
//     let pcap = read_pcap_sample("./tests/data/cap3.pcap")?;
//     let mut buffer = get_pcap_buffer(&pcap);

//     // check query
//     let mut query = DNSMessage::default();
//     query.from_network_order(&mut buffer.buf_query)?;

//     assert_eq!(query.header.flags.qr, PacketType::Query);
//     assert_eq!(query.header.flags.op_code, OpCode::Query);
//     assert!(!query.header.flags.authorative_answer);
//     assert!(!query.header.flags.truncated);
//     assert!(query.header.flags.recursion_desired);
//     assert!(!query.header.flags.recursion_available);
//     assert!(!query.header.flags.z);
//     assert!(query.header.flags.authentic_data);
//     assert_eq!(query.header.flags.response_code, ResponseCode::NoError);

//     assert_eq!(query.header.qd_count, 1);
//     assert_eq!(query.header.an_count, 0);
//     assert_eq!(query.header.ns_count, 0);
//     assert_eq!(query.header.ar_count, 1);

//     assert_eq!(format!("{}", query.question.qname), "hk.");
//     assert_eq!(query.question.qtype, QType::DNSKEY);
//     assert_eq!(query.question.qclass, QClass::IN);

//     // check response
//     let mut resp = DNSMessage::default();
//     resp.from_network_order(&mut buffer.buf_resp)?;

//     assert_eq!(resp.header.flags.qr, PacketType::Response);
//     assert_eq!(resp.header.flags.op_code, OpCode::Query);
//     assert!(!resp.header.flags.authorative_answer);
//     assert!(!resp.header.flags.truncated);
//     assert!(resp.header.flags.recursion_desired);
//     assert!(resp.header.flags.recursion_available);
//     assert!(!resp.header.flags.z);
//     assert!(resp.header.flags.authentic_data);
//     assert_eq!(resp.header.flags.response_code, ResponseCode::NoError);

//     assert_eq!(resp.header.qd_count, 1);
//     assert_eq!(resp.header.an_count, 4);
//     assert_eq!(resp.header.ns_count, 0);
//     assert_eq!(resp.header.ar_count, 1);

//     // check answers
//     assert!(resp.answer.is_some());
//     let answer = resp.answer.unwrap();
//     assert_eq!(answer.len(), 4);

//     for ans in &answer {
//         assert_eq!(format!("{}", ans.name), "hk.");
//         assert_eq!(ans.r#type, QType::DNSKEY);
//         assert!(matches!(ans.class, ExtendedClass::TrueQType(qclass) if qclass == QClass::IN));
//         assert_eq!(ans.ttl, 86400);
//         assert!(ans.rd_length == 136 || ans.rd_length == 264);

//         let r_data = ans.r_data.as_ref().unwrap();

//         assert!(matches!(r_data, RData::DnsKey(key) if key.flags == 0x0100 || key.flags == 0x101));

//         assert!(matches!(r_data, RData::DnsKey(key) if key.protocol == 3));

//         assert!(matches!(r_data, RData::DnsKey(key) if key.algorithm == 8));
//     }

//     assert!(
//         matches!(answer[0].r_data.as_ref().unwrap(), RData::DnsKey(key) if key.key ==  [
//             0x03, 0x01, 0x00, 0x01, 0xa4, 0xc9, 0x2a, 0xf4, 0x9b, 0x70, 0xd0, 0x4a, 0x1d, 0x5a, 0xfe, 0xf3,
//             0xba, 0x4f, 0xb0, 0xab, 0x41, 0xc7, 0x20, 0x13, 0xf5, 0x3a, 0x91, 0x35, 0x9f, 0x10, 0x3e, 0x6e,
//             0xf7, 0x22, 0x41, 0xac, 0xc6, 0xfd, 0xe1, 0x34, 0x36, 0x5b, 0xf8, 0x3e, 0x03, 0x01, 0xcc, 0xe8,
//             0xc5, 0xf3, 0x66, 0xfc, 0x18, 0x29, 0xe9, 0x09, 0xf5, 0x5a, 0x92, 0xfb, 0x5e, 0xb9, 0x13, 0xdf,
//             0xde, 0x7c, 0x8e, 0x63, 0xd1, 0x2b, 0xf3, 0x27, 0x5a, 0xd9, 0x44, 0x14, 0xb4, 0x0c, 0x63, 0x4b,
//             0x84, 0x48, 0xd1, 0x08, 0x0c, 0x1a, 0xdc, 0x34, 0x28, 0x33, 0xa2, 0x54, 0x37, 0x1b, 0x82, 0x01,
//             0xfb, 0xe7, 0x13, 0x2a, 0xcc, 0x4b, 0xf7, 0x2e, 0xe5, 0x9a, 0xb3, 0x1f, 0xb1, 0xc9, 0xdc, 0x25,
//             0xf9, 0x6d, 0x56, 0x0a, 0x23, 0xe2, 0x0e, 0x38, 0x9e, 0x71, 0xad, 0x53, 0xd0, 0x7b, 0x15, 0x8d,
//             0xaa, 0x65, 0x7e, 0x8f
//             ]
//         )
//     );

//     assert!(
//         matches!(answer[1].r_data.as_ref().unwrap(), RData::DnsKey(key) if key.key ==  [
//             0x03,  0x01,  0x00,  0x01,  0xce,  0x95,  0xd1,  0x51,  0x96,  0x2a,  0x1a,  0xa4,  0xff,  0xeb,  0xed,  0x37,
//             0x57,  0xc9,  0xef,  0xa1,  0x7f,  0x06,  0x2c,  0x42,  0x0a,  0xdc,  0xcd,  0xcf,  0x7a,  0x9b,  0xf2,  0x59,
//             0x67,  0x0f,  0x2c,  0x34,  0xde,  0xe0,  0x6b,  0xef,  0x35,  0xf2,  0x9b,  0xa4,  0x6c,  0xd2,  0xef,  0xb9,
//             0x94,  0xb4,  0xe2,  0xdb,  0x22,  0x7e,  0xa5,  0xc4,  0x77,  0x34,  0xc3,  0x86,  0x90,  0x6e,  0x96,  0x34,
//             0xd9,  0x9b,  0x52,  0xf4,  0x0a,  0xa5,  0x7b,  0x0c,  0x43,  0x1d,  0xe3,  0xed,  0x24,  0x2a,  0x3f,  0x8d,
//             0x46,  0x94,  0xb4,  0x28,  0xab,  0x61,  0x38,  0x4d,  0xab,  0xf5,  0x35,  0x6c,  0xfa,  0xc9,  0xab,  0xb4,
//             0x6e,  0xf1,  0xd5,  0x51,  0x69,  0x3e,  0xb3,  0x0a,  0xfc,  0xf5,  0x4b,  0xc2,  0x66,  0x3f,  0xa3,  0x1c,
//             0x91,  0xe9,  0xad,  0x53,  0xfb,  0x18,  0x0c,  0xed,  0x40,  0xb1,  0x57,  0x80,  0xa3,  0xb5,  0x64,  0xdc,
//             0x60,  0x5b,  0x41,  0xe7,
//             ]
//         )
//     );

//     assert!(
//         matches!(answer[2].r_data.as_ref().unwrap(), RData::DnsKey(key) if key.key ==  [
//             0x03,  0x01,  0x00,  0x01,  0x91,  0x50,  0xe7,  0xf1,  0x93,  0xc7,  0x0c,  0x8e,  0xb5,  0xa3,  0x18,  0x7c,
//             0x3b,  0x8d,  0x48,  0xd3,  0x29,  0x95,  0x64,  0x34,  0x01,  0x92,  0xfc,  0x92,  0xd3,  0x57,  0x5f,  0x56,
//             0x1a,  0xc6,  0xa8,  0x59,  0x24,  0x30,  0x9b,  0x6d,  0x0e,  0x63,  0x88,  0xa4,  0x79,  0x17,  0x2c,  0xcd,
//             0x1f,  0xe2,  0xf8,  0xe3,  0x2c,  0x87,  0xd0,  0x2a,  0xbc,  0xad,  0xb2,  0xaa,  0x01,  0x82,  0x42,  0xa4,
//             0x43,  0x6b,  0x0b,  0xef,  0x16,  0xce,  0x26,  0x74,  0xe2,  0xca,  0xe2,  0x57,  0x61,  0xa8,  0x8c,  0x60,
//             0xdc,  0x77,  0x6e,  0x66,  0xbf,  0x58,  0xef,  0xed,  0x59,  0x01,  0x47,  0x29,  0x38,  0x02,  0x62,  0x61,
//             0x1d,  0xe0,  0xf3,  0x2d,  0xf5,  0x37,  0x0d,  0xe9,  0x0c,  0x7a,  0x56,  0x23,  0xe3,  0x37,  0x80,  0x63,
//             0x2c,  0x65,  0x94,  0x19,  0x4a,  0xec,  0x06,  0x54,  0xbc,  0x3f,  0xde,  0x6d,  0x8f,  0x43,  0x95,  0xbf,
//             0x4a,  0x1e,  0x7b,  0xbc,  0x0f,  0xdf,  0x6c,  0x46,  0x81,  0xd9,  0x42,  0x5f,  0x91,  0xc1,  0xb1,  0xe9,
//             0xca,  0x14,  0x9e,  0x2f,  0xa6,  0xa0,  0x92,  0xea,  0xf9,  0xb9,  0x6e,  0x9f,  0xb4,  0xa8,  0x21,  0x3d,
//             0x7a,  0xa4,  0x03,  0xa9,  0x09,  0xe0,  0x01,  0xcc,  0x8a,  0x6c,  0x7e,  0x27,  0x3c,  0x47,  0x27,  0x9e,
//             0xf8,  0x73,  0x50,  0x76,  0xf8,  0x2c,  0xcf,  0xbb,  0x8a,  0x45,  0x95,  0x56,  0x5f,  0x8b,  0x04,  0xe5,
//             0x86,  0x33,  0x5f,  0x84,  0x94,  0x1d,  0x62,  0xb9,  0x90,  0xb9,  0x5f,  0x4b,  0x84,  0x9a,  0xc1,  0x2a,
//             0x8a,  0x0a,  0xee,  0xdc,  0xb1,  0x8c,  0xfa,  0xd9,  0xef,  0x6a,  0xb6,  0x29,  0x1c,  0xc9,  0x8c,  0x4e,
//             0xeb,  0xc2,  0x54,  0x8c,  0x11,  0xe8,  0xee,  0xb6,  0x3c,  0xd2,  0x49,  0x90,  0x92,  0x42,  0xbb,  0x26,
//             0x91,  0x2f,  0xa6,  0xc1,  0x68,  0x42,  0x12,  0x04,  0x23,  0x4b,  0x49,  0xbc,  0x7a,  0x4b,  0xa1,  0x7f,
//             0x28,  0x5a,  0xe0,  0xdb,
//             ]
//         )
//     );

//     assert!(
//         matches!(answer[3].r_data.as_ref().unwrap(), RData::DnsKey(key) if key.key ==  [
//             0x03,  0x01,  0x00,  0x01,  0xb2,  0xf2,  0x99,  0xc8,  0xa5,  0x11,  0x0a,  0xce,  0x12,  0x36,  0xa4,  0x3c,
//             0xc4,  0xd7,  0x37,  0x86,  0x83,  0x47,  0x58,  0xc9,  0x8c,  0xe3,  0xe8,  0x6c,  0xbe,  0xf6,  0x9e,  0x02,
//             0x9a,  0x28,  0xb2,  0xfe,  0x27,  0xba,  0x26,  0x94,  0xc0,  0x0b,  0x4d,  0x71,  0x5d,  0x7e,  0x7b,  0x6b,
//             0xdc,  0x77,  0xc4,  0xc2,  0xbe,  0x15,  0xdf,  0x99,  0x71,  0xa7,  0xb5,  0xec,  0x80,  0xdf,  0x38,  0x21,
//             0xd3,  0x68,  0x21,  0xe8,  0x71,  0x12,  0xcf,  0x66,  0x6e,  0x16,  0xc6,  0x53,  0xc9,  0xc4,  0x3f,  0x81,
//             0x31,  0xac,  0x28,  0x22,  0x7b,  0x81,  0x98,  0x61,  0x05,  0x1a,  0xdf,  0x7c,  0x51,  0x0e,  0xab,  0xd0,
//             0x77,  0x10,  0x6c,  0x86,  0x4c,  0xc2,  0xa0,  0xdf,  0xa8,  0x70,  0x87,  0x27,  0x4f,  0x43,  0x64,  0xd6,
//             0xce,  0x12,  0xa0,  0x77,  0x56,  0x81,  0x0a,  0x8e,  0x43,  0x2e,  0x07,  0x53,  0x55,  0x81,  0x0b,  0x67,
//             0x35,  0xc0,  0x03,  0x4b,  0xf7,  0x6c,  0xbd,  0x97,  0x03,  0xd5,  0xb2,  0xdd,  0xf4,  0xf9,  0x56,  0x76,
//             0x91,  0x21,  0xd3,  0x84,  0xfd,  0x0a,  0xe1,  0x7d,  0xca,  0x7e,  0x1c,  0x1e,  0xb1,  0x46,  0x56,  0x4c,
//             0x4f,  0xbf,  0x2e,  0x6e,  0xcf,  0x6e,  0xf3,  0x36,  0x72,  0x5e,  0x32,  0xcc,  0x81,  0xf8,  0xbb,  0x44,
//             0xbb,  0x6a,  0x28,  0x6f,  0xec,  0x80,  0xce,  0x64,  0xf0,  0xe1,  0xb2,  0xda,  0x8a,  0xc7,  0xda,  0x9a,
//             0xcc,  0x3d,  0x28,  0x7c,  0x8e,  0xb5,  0xf6,  0x1a,  0x38,  0x53,  0x81,  0x27,  0x64,  0xf7,  0x9f,  0x92,
//             0x4f,  0xe6,  0xa4,  0x46,  0xce,  0xd8,  0x3c,  0xcb,  0xb7,  0x71,  0x97,  0x43,  0xca,  0x3f,  0xc0,  0x9d,
//             0xc1,  0x90,  0xb2,  0xe1,  0xb6,  0xdc,  0xfc,  0xc7,  0x41,  0x7e,  0x2e,  0xad,  0xcb,  0x05,  0xd4,  0xbf,
//             0x2a,  0x4c,  0x01,  0xdd,  0xfe,  0x2b,  0xb1,  0x0a,  0xda,  0x69,  0xf6,  0x6d,  0x38,  0x98,  0x3f,  0x4d,
//             0xfe,  0x9f,  0xb2,  0x39,
//             ]
//         )
//     );

//     // let additional_record = resp.additional.unwrap();
//     // assert_eq!(format!("{}", additional_record[0].name), ".");
//     // assert_eq!(additional_record[0].r#type, QType::OPT);
//     // assert_eq!(additional_record[0].class, 1232); // ttl == payload size for OPT

//     // assert_eq!(additional_record[0].rd_length, 0);

//     Ok(())
// }
